# name you can give any name
name: Continuous Integration and Continuous Deployment on Ubuntu

# triggers ci cd when you push code to any branch
on:
  push:
  pull_request:
  # this is for manual trigger of ci cd workflow from github actions
  workflow_dispatch:

# jobs is the place where you define all the steps
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          # Fetch all history for all branches and tags
          fetch-depth: 0

      # install nodejs
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'

      # install dependencies
      - name: Install Dependencies
        run: npm install

      # run linters
      - name: Run Linters
        run: npm run lint

      # run formater
      - name: Run Formater
        run: npm run format

      # verify the commit message with commitlint and commitlint.config.js
      # - name: Verify Commit Message
      #   uses: wagoid/commitlint-github-action@v3
      #   with:
      #     configFile: commitlint.config.cjs

      # build docker image for ci cd pipeline
      - name: Build Docker Image
        run: docker build -t nextjs-cicd-docker:1.0 .
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test #this job depends on "test" having finished
    #we tell Github to only execute this step if we're on our master branch (so we don't put unfinished branches in production)
    if: github.ref == 'refs/heads/master' 
    steps:
      - name: Deploying to Digitalocean droplet
        uses: appleboy/ssh-action@master # An action made to control Linux servers
        with: # We set all our secrets here for the action, these won't be shown in the action logs
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/majid/applications/next-cicd-docker # we move into our app's folder
            git pull # we pull any changes from git
            npm prune # we remove any unused dependencies
            npm install # we install any missing dependencies
            npm run build # we build our app
            pm2 reload all # we reload the app via PM2